## Question 1: Use yfinance to Extract Stock Data
#Reset the index, save, and display the first five rows of the tesla_data dataframe using the head function.
#Upload a screenshot of the results and code from the beginning of Question 1 to the results below.

!python -m pip install yfinance==0.2.38
!python -m pip install pandas==1.3.5
!phyton -m pip install --upgrade yfinance pandas
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

tesla = "TSLA"
df = yf.download(tesla, start='2017-01-01', end='2020-01-01')
df.reset_index(inplace=True)
tesla_data=df
tesla_data.head()


#  Question 2: Use Webscraping to Extract Tesla Revenue Data
# Display the last five rows of the tesla_revenue dataframe using the tail function. Upload a screenshot of the results.

url ='https://stockanalysis.com/stocks/tsla/financials/'
html_data  = requests.get(url).text
print(html_data)
soup = BeautifulSoup(html_data, 'html5lib')

table_Tesla = soup.find(id="main-table")
headers_Tesla = [th.text.strip() for th in table_Tesla.find_all('th')]
rows = []
for tr in table_Tesla.find_all('tr'):
    row_data = [td.text.strip() for td in tr.find_all('td')]
    if row_data:
        rows.append(row_data)

tesla_revenue = pd.DataFrame(rows, columns=headers_Tesla)
tesla_revenue.tail()

# Question 3: Use yfinance to Extract Stock Data
# Reset the index, save, and display the first five rows of the gme_data dataframe using the head function. 
# Upload a screenshot of the results and code from the beginning of Question 1 to the results below.

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots


ticker = 'GME'
df = yf.download(ticker, start='2017-01-01', end='2024-07-14')
df.reset_index(inplace=True)

gme = yf.Ticker("GME")
gme_data = tesla.history(period="max")
gme_data.head()


# Question 4: Use Webscraping to Extract GME Revenue Data
# Display the last five rows of the gme_revenue dataframe using the tail function. Upload a screenshot of the results.

url ='https://stockanalysis.com/stocks/gme/financials/'
html_data  = requests.get(url).text
print(html_data)
soup = BeautifulSoup(html_data, 'html5lib')

table_GME = soup.find(id="main-table")
headers_GME = [th.text.strip() for th in table_GME.find_all('th')]
rows = []
for tr in table_GME.find_all('tr'):
    row_data = [td.text.strip() for td in tr.find_all('td')]
    if row_data:
        rows.append(row_data)

gme_revenue = pd.DataFrame(rows, columns=headers_GME)
gme_revenue.tail()


#Question 5: Plot Tesla Data

!python -m pip install --upgrade nbformat

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots



tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True)
print(tesla_data.columns)



def make_graph(tesla_data):
   fig = make_subplots(rows=1, cols=1)
   fig.add_trace(go.Scatter(x=tesla_data['Date'], y=tesla_data['Close'], mode='lines+markers', name='Close Price'), row=1, col=1)
   fig.update_layout(title="Tesla Stock Prices")
   fig.show()

make_graph(tesla_data)


#Question 6: Plot Tesla Data
gme = yf.Ticker("GME")
gme_data = gme.history(period="max")
gme_data.reset_index(inplace=True)
def make_graph(gme_data):
   fig = make_subplots(rows=1, cols=1)
   fig.add_trace(go.Scatter(x=gme_data['Date'], y=gme_data['Close'], mode='lines+markers', name='Close Price'), row=1, col=1)
   fig.update_layout(title="GME Stock Prices")
   fig.show()
make_graph(gme_data)

